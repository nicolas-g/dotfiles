#####################
### Extas Aliases ###
#####################

alias cat='bat -p -P'

alias ls='lsd'
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'

# example:  echo less typing now! | tb
alias tb="nc termbin.com 9999"

# https://github.com/daveewart/colordiff
alias diff=colordiff

# https://veracrypt.fr/en/Command%20Line%20Usage.html
alias veracrypt='/Applications/VeraCrypt.app/Contents/MacOS/VeraCrypt --text'

alias glow='glow -p'

alias hdi='howdoi'

##### curl for useragents
alias curlie="curl -H \"User-Agent: Mozilla/5.0 (Windows; U; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)\""
alias curlff="curl -H \"User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.8) Gecko/2009032609 Firefox/3.0.0 (.NET CLR 3.5.30729)\""

alias sshtunnel='
echo "### Local port forwarding ###"
echo "# forward connections from my local <local-port> to <target-machine>:<remote-port> through <jump-host> server"
echo "ssh -N -L <local-port>:<target-machine>:<remote-port> <jump-host>"
echo "-f \ Forks the process to the background"
echo "-N \ do not execute remote command "
echo "-n \ redirect stdin from /dev/null "
echo "\n### Remote port forwarding ###"
echo "# port on which th remote server will listen forward connections to my local machine"
echo "ssh -R <remote-port>:localhost:<local-port> <jump-host>"'

### Vagrant
alias v="vagrant global-status"
alias vup="vagrant up"
alias vhalt="vagrant halt"
alias vssh="vagrant ssh"
alias vreload="vagrant reload"
alias vrebuild="vagrant destroy --force && vagrant up"

# AI
alias ai='mods'


fb() {
    # -t 0 checks if the standard input (file descriptor 0) is coming from a terminal
    if [ -t 0 ]; then
        # Standard input is from a terminal (no pipe)
        # If thereâ€™s no piped input, we use -ti (interactive terminal) options
        docker run --rm -ti -v ~/.config/fabric/:/root/.config/fabric/ fabric-ai fabric "$@"
    else
        # Standard input is from a pipe
        # If there is piped input, we use -i (interactive without terminal) option
        docker run --rm -i -v ~/.config/fabric/:/root/.config/fabric/ fabric-ai fabric "$@"
    fi
}

ol_update() {
    # Declare a local array variable 'models'
    local models
    # Set the Internal Field Separator (IFS) to newline to handle names with spaces
    IFS=$'\n' models=(
        # Populate the 'models' array with the output from the following command pipeline
        $(ollama list |             # List all models using 'ollama list'
          awk '{ print $1 }' |      # Extract the first column (model names)
          ag latest |               # Filter lines containing 'latest' using 'ag' (the_silver_searcher)
          cut -d':' -f1)            # Cut the string at ':' and take the first field (model name before ':')
    )

    # Iterate over each model name in the 'models' array
    for i in "${models[@]}"; do
        # Print the model name
        echo "LLM Model $i"
        # Pull the model using 'ollama pull'
        ollama pull "$i"
    done
}

ng_update_all() {
    omz update;
    brew upgrade;
    fb -U
    ol_update
    mas outdated
    mas upgrade
    mas outdated
    mas list
}
